# Example: ansible-playbook --ask-become-pass --ask-vault-pass style.yml
#
# This is a sample Ansible script to showcase all of our style decisions.
# Pay close attention to things like spacing, where we use quotes, etc.
# The only thing you can ignore is where comments are, except this first comment:
# It's generally a good idea to include some good information like sample usage
# at the beginning of your file, so that someone can run head on the script
# to see what they should do.
#
# A good rule of thumb on quoting is to quote anything that represents a value
# that does not represent either a primitive type, or something within the
# playbook; e.g. don't quote integers, booleans, variable names, boolean logic
# Variable names still need to be quoted when they are module parameters for
# Ansible to properly resolve them.
# You should also always have single quotes around the outer string, and
# double quotes on the inside.
# If for some reason this isn't possible or it would require escaping quotes
# (which you should avoid if you can), use the scalar string operator (shown
# in this playbook).
#
# Directory structure style:
# Your directory structure should match the structure described by the Ansible
# developers: http://docs.ansible.com/ansible/playbooks_best_practices.html
#
# ---
#
# - include: role_name.yml
#   become: true # only if every task in the role requires super user
#
# The self-named yml file contains all of the actual role tasks.
#
# Header comments are followed by blank line, then --- to signify start of YAML,
# then another blank line, then the script.

---
- hosts: localhost
  tasks:
    - name: fail if someone tries to run this
      fail:
        msg: "this playbook was not meant to actually be ran. just inspect the source!"

- include: first_include.yml # DO NOT quote filenames
- include: second_include.yml # no blank line needed between includes without tags

- include: third_include.yml # includes with vars should have blank lines between
  vars:
    myvar: "third_include"

- include: fourth_include.yml
  tags: "fourth_include"

- hosts: tag_environment_samplefruit
  remote_user: "centos" # options in alphabetical order
  vars:
    sample_str: "dood" # use snake_case for variable names
    sample_bool: true # don't quote booleans or integers
    sample_int: 42
  vars_files:
    - "group_vars/secrets.yml"
  pre_tasks: # then pre_tasks, roles, tasks
    - name: this runs a command that involves both single and double quotes
      command: >
        echo "I can't even"
      args:
        chdir: "/tmp"

    - name: this command just involves double quotes
      command: 'echo "Hey man"'
  roles:
    role: sample_role
    tags: "sample_role" # use this format for role listing
  tasks:
    - name: get list of directory permissions in /tmp
      command: "ls -l /tmp"
      register: tmp_listing # don't quote variable names when registering

    # A task should be defined in the following order:
    # name
    # vars
    # module
    # module arguments, alphabetical
    # loop operator (e.g. with_items, with_fileglob)
    # other options, alphabetical (e.g. become, ignore_errors, when)

    - name: "a more complicated task to show where everything goes: touch all items from /tmp"
      vars: # vars go immediately after name
        instance_names:
          - "az1"
          - "az2"
      file:
        path: "{{ item }}" # use path for single file actions, dest/src for multi file actions
        state: "touch" # arguments go in alphabetical order
      with_items: tmp_listing.stdout_lines # loop things go immediately after module
      # the rest of the task options are in alphabetical order
      become: true # try to keep become only on the tasks that need it. If every task in a host uses become, then move it up to the host options
      ignore_errors: true
      when: ansible_os_family == 'Darwin' and tmp_listing.stdout_lines | length > 1

    - name: some modules can have maps in their maps (woah man)
      azure_rm_virtualmachine:
        admin_username: "azureuser"
        group: # Use multiple-line arrays
          - "group1"
          - "group2"
        name: "{{ item }}"
        network_interfaces: "my_network"
        ssh_password_enabled: false
        tags:
          name: "instance"
          service_tomcat: ""
        vm_size: "Standard_DS1_v2"
        assign_public_ip: true

- hosts: tag_environment_secondfruit
  tasks:
    - name: this task has multiple tags
      tags:
        - "tagme"
        - "tagmetoo"
      set_fact:
        mr_fact: "w"

    - name: perform an action
      action: ec2_facts
      delegate_to: localhost
# newline at end of file
